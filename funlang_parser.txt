grammar funlang_parser;

program
    : topLevelDecls EOF
    ;

topLevelDecls
    : functions
    | structs
    ;

structs
    : struct+
    ;

impls
    : impl+
    ;

struct
    : 'struct' ID '{' structMembers '}'
    ;

nameDecl
    : type ID
    ;

structMembers
    : structMember*
    | impl
    ;

structMember 
    : nameDecl ';'

impl
    : 'impl' '{' functions '}'

functions
    : func+
    ; 

func : nameDecl '(' args ')' compoundStmt;

args 
    : (arg (',' arg)*)?
    ; 

arg : nameDecl
    ;

compoundStmt
    : '{' (simpleStmt )+ '}'
    ;
    
simpleStmt
    : declStmt ';'
    | expr ';'
    | ifStmt
    | forStmt
    | whileStmt
    | loopStmt
    | matchStmt ';'
    | returnStmt
    ;

if expr compoundStmt

forStmt : FOR '(' (declStmt|expr) ';' expr ';' expr ')' compoundStmt

whileStmt : WHILE '(' expr ')' compoundStmt

loopStmt : LOOP compoundStmt

matchStmt : MATCH '(' ID ')' '{' matchArm+ '}'

matchArm
    : (expr | 'default') '=>' compoundStmt;

declStmt
    : nameDecl '=' expr
    ;


expr 
    : assign
    ;

returnStmt
    : 'return' expr? ';'
    ; 

assign 
    : eqExpr ('='|'+='|'-=') eqExpr
    | eqExpr
    ;

eqExpr 
    : cmpExpr ('=='|'!=') cmpExpr
    | cmpExpr
    ;

cmpExpr
    : addExpr ('<'|'<='|'>' | '>=') addExpr
    | addExpr
    ;

addExpr
    : multdiv ('+'|'-') multdiv
    | multdiv
    ;

multdiv
    : unary ('*'|'/') unary
    | unary
    ;

unary 
    : ('++'|'--'| '!'| '-'| '@') postfix
    | postfix
    ;

postfix
    : primary ('.'| '[' expr ']' | '->')
    : primary
    ;

primary 
    : ID
    | NUM
    | POINTNUM
    | 'true'
    | 'false'
    | FnCall
    | '(' expr ')'
    ;
    
FnCall
    : ID '(' callArgs ')'
    ;
    
callArgs 
    : (expr (',' expr)*)?
    ;

type : '*'* VOID | BOOL | CHAR | I32| I64 | I32 | F64 | F32 | ID
    ;
