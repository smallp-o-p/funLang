grammar funlang_parser;

program
    : functions EOF
    ;
    
functions
    : func+
    ; 

func : proto compoundstmt;

proto 
    : type ID '(' args ')'
    ; 

args 
    : (arg (',' arg)*)?
    ; 

arg : type ID
    ;

compoundstmt 
    : '{' simplestmt+ '}'
    ;
    
simplestmt 
    : declare
    | expr
    | return
    ;
    
declare
    : type ID '=' expr
    ;
    
expr 
    : assign
    ; 

return : 'return' expr ';'; 

assign 
    : eqExpr
    | ID '=' expr
    ;
eqExpr 
    : cmpExpr ('=='|'!=') cmpExpr
    | cmpExpr
    ; 
cmpExpr
    : addExpr ('<'|'<='|'>' | '>=') addExpr
    | addExpr
    ; 
addExpr
    : multdiv ('+'|'-') multdiv
    | multdiv
    ;
multdiv
    : unary ('*'|'/') unary
    | unary
    ;
unary 
    : ('++'|'--'| '!'| '-') primary
    | primary
    ;
primary 
    : ID
    | NUM
    | POINTNUM
    | 'true'
    | 'false'
    | fnCall
    | '(' expr ')'
    ;
    
fnCall 
    : ID '(' callArgs ')'
    ;
    
callArgs 
    : (expr (',' expr)*)?
    ;

type : VOID 
    | BOOL 
    | CHAR 
    | I32
    | I64
    | I32 
    | F64
    | F32
    ;
