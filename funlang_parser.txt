grammar funlang_parser;

program
    : topLevelDecls EOF
    ;

topLevelDecls
    : functions
    | structs
    ;

structs
    : struct+
    ;

impls
    : impl+
    ;

struct
    : 'struct' ID '{' structMembers '}'
    ;

structMembers
    : structMember*
    ;
structMember
    : type ID ';'
    : impl
    ;

impl
    : 'impl' '{' functions '}'

functions
    : func+
    ; 

func : type ID '(' args ')' compoundStmt;

args 
    : (arg (',' arg)*)?
    ; 

arg : type ID
    ;

compoundStmt
    : '{' (simpleStmt ';')+ '}'
    ;
    
simpleStmt
    : declare
    | expr
    | ifStmt
    | forStmt
    | whileStmt
    | loopStmt
    | matchStmt
    | return
    ;

forStmt : FOR expr in expr, expr compoundStmt

whileStmt : WHILE '(' expr ')' compoundStmt

loopStmt : LOOP compoundStmt

matchStmt : MATCH '(' ID ')' '{' matchArm+ '}'

matchArm
    : (expr | 'default') '=>' compoundStmt;

declare
    : type ID '=' expr
    ;
    
expr 
    : assign
    ;

return 
    : 'return' expr? ';'
    ; 

assign 
    : eqExpr ('='|'+='|'-=') eqExpr
    | eqExpr
    ;

eqExpr 
    : cmpExpr ('=='|'!=') cmpExpr
    | cmpExpr
    ;

cmpExpr
    : addExpr ('<'|'<='|'>' | '>=') addExpr
    | addExpr
    ;

addExpr
    : multdiv ('+'|'-') multdiv
    | multdiv
    ;

multdiv
    : unary ('*'|'/') unary
    | unary
    ;

unary 
    : ('++'|'--'| '!'| '-') primary 
    | primary
    ;

primary 
    : ID
    | NUM
    | POINTNUM
    | 'true'
    | 'false'
    | FnCall
    | '(' expr ')'
    ;
    
FnCall
    : ID '(' callArgs ')'
    ;
    
callArgs 
    : (expr (',' expr)*)?
    ;

type : VOID 
    | BOOL 
    | CHAR 
    | I32
    | I64
    | I32 
    | F64
    | F32
    | ID
    ;
